class Solution {
    public int shortestBridge(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        boolean found = false;
        Queue<int[]> q = new LinkedList<>();
        
        // Find the first island and perform DFS to mark it, adding its boundary to the queue
        for (int i = 0; i < m; i++) {
            if (found) break;
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) {
                    dfs(grid, i, j, q);
                    found = true;
                    break;
                }
            }
        }

        // BFS to expand from the first island to reach the second
        int[][] dirs = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
        int dis = 0;
        while (!q.isEmpty()) {
            int size = q.size();
            while (size-- > 0) {
                int[] cur = q.poll();
                for (int[] dir : dirs) {
                    int i = cur[0] + dir[0];
                    int j = cur[1] + dir[1];
                    if (i >= 0 && j >= 0 && i < m && j < n) {
                        if (grid[i][j] == 1) {
                            return dis;  // Found the second island
                        }
                        if (grid[i][j] == 0) {
                            q.offer(new int[]{i, j});
                            grid[i][j] = -1;  // Mark as visited by BFS
                        }
                    }
                }
            }
            dis++;
        }
        return -1;
    }

    // DFS to mark the first island and add its boundary to the queue
    private void dfs(int[][] grid, int i, int j, Queue<int[]> q) {
        if (i < 0 || j < 0 || i >= grid.length || j >= grid[0].length || grid[i][j] != 1) {
            return;
        }

        grid[i][j] = -1;  // Mark as part of the first island
        q.offer(new int[]{i, j});  // Add to queue to use as starting point for BFS

        dfs(grid, i + 1, j, q);
        dfs(grid, i - 1, j, q);
        dfs(grid, i, j + 1, q);
        dfs(grid, i, j - 1, q);
    }
}
