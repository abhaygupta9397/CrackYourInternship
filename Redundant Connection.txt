class Solution {
    public int[] findRedundantConnection(int[][] edges) {
        int ans[] = null;
        int n = edges.length;
        List<Set<Integer>> li = new ArrayList<>(1001);
        for(int i = 0; i < 1001; i++){
            li.add(new HashSet<>());
        }

        for(int []edge : edges){
            int u = edge[0];
            int v = edge[1];
            if(dfs(u,v,0,li))
            ans = edge;
            else {
                li.get(u).add(v);
                li.get(v).add(u);
            }
        }
        return ans;
    }

    boolean dfs(int u , int v, int pre, List<Set<Integer>>li){
        if(u == v)
        return true;
        for(int w : li.get(u)){
            if(w == pre)
            continue;
            boolean ans = dfs(w,v,u,li);
            if(ans) return true;
        }
        return false;
    }
}