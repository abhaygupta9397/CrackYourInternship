class Solution {
    public int longestIncreasingPath(int[][] matrix) {
        int row = matrix.length;
        int col = matrix[0].length;
        
       
        if(row == 1 && col == 1)
        return 1;

        int dp[][] = new int[row][col];
        int max = 0;
        
        for(int i = 0; i < row; i++){
            for(int j = 0; j < col; j++){
                if(dp[i][j] == 0)
                max = Math.max(max,dfs(matrix,i,j,dp));
            }
        }
        return max;
    }

    public int dfs(int [][]matrix , int x , int y,int [][]dp){
        if(dp[x][y] > 0)
        return dp[x][y];

        int dirs[][] = {{1,0},{-1,0},{0,1},{0,-1}};

        int ans = 1;
        int row = matrix.length;
        int col = matrix[0].length;

        

       
                for(int dir[] : dirs){
                    
                    int xx = x + dir[0];
                    int yy = y + dir[1];

                    if(xx < 0 || xx >= row || yy < 0 || yy >= col) {
                        continue; 
                    }
                    if(matrix[xx][yy] <= matrix[x][y]){
                        continue; 
                    }
                    ans = Math.max(ans,dfs(matrix,xx,yy,dp)+1);
                }
            
        
            dp[x][y] = ans;
            return ans;  
    }
}