class Solution {
    public int[][] kClosest(int[][] points, int k) {
        PriorityQueue<Double> pq = new PriorityQueue<>(Collections.reverseOrder());
        HashSet<Double> set = new HashSet<>();
        int ans[][] = new int[k][2];
        for (int i = 0; i < points.length; i++) {
            double dis = 0.5 * (points[i][0] * points[i][0] + points[i][1] * points[i][1]);
            pq.offer(dis);
            set.add(dis);
            if (pq.size() > k) {
                set.remove(pq.poll());
            }

        }
        int p = 0;
        for (int i = 0; i < points.length; i++) {
            if (set.contains(0.5 * (points[i][0] * points[i][0] + points[i][1] * points[i][1])))
                ans[p++] = points[i];
        }
        return ans;
    }
}