class Solution { //Backtracking pattern - Day 43
    public List<List<String>> solveNQueens(int n) {
        List<List<String>> ans = new ArrayList<List<String>>();

        char board[][] = new char[n][n];
        for(int i = 0; i < n; i++){
            for(int j = 0; j < n; j++){
                board[i][j] = '.';
            }
        }
        fun(ans,board,0);
        return ans; 
    }
    void fun(List<List<String>> ans , char[][] board , int row){
        if(row == board.length)
        {
            ans.add(build(board));
            return;
        }
        for(int col = 0; col < board.length; col++){
            if(valid(board,row,col)){
                board[row][col] = 'Q';
                fun(ans,board,row+1);
                board[row][col] = '.';
            }
        }
    }

    boolean valid(char[][] board , int row , int col){
        for(int i = 0; i < row ; i++){
            if(board[i][col] == 'Q')
            return false;
        }
for(int i=row-1,j=col+1;i>=0 && j<board.length;i--,j++)
        {
            if(board[i][j] == 'Q')
                return false;
        }
        for(int i = row - 1,j = col - 1; i>=0 && j >=0;i--,j--){
            if(board[i][j] == 'Q')
            return false;
        }
        return true;
    }
    List<String> build(char board[][]){
        List<String> val = new ArrayList<>();
        for(int i = 0; i < board.length;i++)
           val.add(new String(board[i]));
        return val;
    }
}