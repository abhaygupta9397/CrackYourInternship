class Solution 
{
    //Function to find maximum of minimums of every window size.
    static int[] maxOfMin(int[] arr, int n) 
    {
        // Your code here
        int psi[] = getPSI(arr,n);
        int fsi[] = getFSI(arr,n);
        
        int ans[] = new int[n];
        Arrays.fill(ans,Integer.MIN_VALUE);
        for(int i = 0; i < n; i++){
            int ps = psi[i];
            int fs = fsi[i];
            
            int max_window = fs - ps - 2;
            ans[max_window] = Math.max(ans[max_window],arr[i]);
           //f(ans[max_window] == 0) ans[max_window] = arr[i];
            
        }
        for(int i = n - 2; i >= 0; i--)
        ans[i] = Math.max(ans[i],ans[i+1]);
        
        return ans;
    }
    static int[] getPSI(int arr[] , int n){
        int ans[] = new int[n];
        Deque<Integer> stk = new ArrayDeque<>();
        for(int i = 0; i < n; i++){
        while(!stk.isEmpty() && arr[stk.peek()] >= arr[i])
        stk.pop();
        
        if(stk.isEmpty())
        ans[i] = -1;
        else
        ans[i] = stk.peek();
        
        stk.push(i);
        }
        return ans;
    }

    static int[] getFSI(int arr[] , int n){
        int ans[] = new int[n];
        Deque<Integer> stk = new ArrayDeque<>();
        for(int i = n - 1; i >= 0; i--){
        while(!stk.isEmpty() && arr[stk.peek()] >= arr[i])
        stk.pop();
        
        if(stk.isEmpty())
        ans[i] = n;
        else
        ans[i] = stk.peek();
        
        stk.push(i);
        }
        return ans;
    }
}