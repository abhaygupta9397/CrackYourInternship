class Solution {
    public int numIslands(char[][] grid) {
        int n = grid.length;
        int m = grid[0].length;
        int iland = 0;
        for(int i = 0; i < n; i++){
            for(int j = 0; j < m; j++){
                if(grid[i][j] == '1')
                {
                    dfs(grid,i,j);  // it will the entire island club and mark them as '$'
                    iland++;
                }
            }
        }
        return iland;
    }
    public void dfs(char grid[][] , int i , int j){
        int n = grid.length;
        int m = grid[0].length;
        // no need to process this
        if(i < 0 || j < 0 || i >= n || j >= m || grid[i][j] != '1')
        return;
         
        //visited mark it as '$' 
        grid[i][j] = '$';
        
        //checking individually for all four possibility
        dfs(grid,i,j-1);
        dfs(grid,i,j+1);
        dfs(grid,i+1,j);
        dfs(grid,i-1,j);
    }
}