//{ Driver Code Starts
import java.util.*;
import java.lang.*;
import java.io.*;
class GFG
{
    public static void main(String[] args) throws IOException
    {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int T = Integer.parseInt(br.readLine().trim());
        while(T-->0)
        {
            String[] S = br.readLine().trim().split(" ");
            int V = Integer.parseInt(S[0]);
            int E = Integer.parseInt(S[1]);
            ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
            for(int i = 0; i < V; i++){
                adj.add(new ArrayList<Integer>());
            }
            for(int i = 0; i < E; i++){
                String[] s = br.readLine().trim().split(" ");
                int u = Integer.parseInt(s[0]);
                int v = Integer.parseInt(s[1]);
                adj.get(u).add(v);
                adj.get(v).add(u);
            }
            Solution obj = new Solution();
            boolean ans = obj.isBipartite(V, adj);
            if(ans)
                System.out.println("1");
            else System.out.println("0");
       }
    }
}
// } Driver Code Ends



 
class Solution
{
    public boolean isBipartite(int V, ArrayList<ArrayList<Integer>>adj)
    {
        // Code here
        //bfs 
            int color[] = new int[V+1];
        
            Queue<Integer> q = new LinkedList<Integer>();

            for (int p = 0;p < V; p++){
               if(color[p] == 0) 
                {
                     q.offer(p);
            color[p] = 1;
                
                
            
           
            while(!q.isEmpty()){
                int i = q.poll();
              
                int node_color = color[i];
            for(int j = 0; j < adj.get(i).size(); j++){
                
                
                
                
                if( color[adj.get(i).get(j)]  == 0)
                {color[adj.get(i).get(j)] = node_color * -1;
                q.offer(adj.get(i).get(j));}
                
                else if(color[adj.get(i).get(j)] == node_color)
                return false;
            }
            }}}
            return true;
            
        }
    }
