class Solution { // Day - 45 (The end)
    public List<List<String>> partition(String s) {
        int l = s.length();
        List<List<String>> ans = new ArrayList<>();
        boolean[][] dp = new boolean[l][l];
        for(int i = 0; i < l; i++){
            for(int j = 0; j <= i; j++){
                if(s.charAt(i) == s.charAt(j) && (i - j <= 2 || dp[j+1][i-1])){
                    dp[j][i] = true;
                }
            }
        }
        helper(ans,new ArrayList<>(),dp,s,0);
        return ans;
    }
    public void helper (List<List<String>> ans , List<String> path, boolean[][] dp , String s , int pos){
        if(pos == s.length()){
            ans.add(new ArrayList<>(path));
            return;
        }
        for(int i = pos; i < s.length(); i++){
            if(dp[pos][i]){
                path.add(s.substring(pos,i+1));
                helper(ans,path,dp,s,i+1);
                path.remove(path.size()-1);
            }
        }
    }
}