class Solution {
    // Function to return a list containing the DFS traversal of the graph.
    public ArrayList<Integer> dfsOfGraph(int V, ArrayList<ArrayList<Integer>> adj) {
        // Code here
        boolean[] visited = new boolean[V];
        ArrayList<Integer> ans = new ArrayList<>();
          dfs(0,adj,visited,ans);
          return ans;
    }
    public void dfs(int src ,ArrayList<ArrayList<Integer>> adj,boolean[] visited, ArrayList<Integer> ans ){
        visited[src] = true;
        ans.add(src);
        
        for(int j = 0; j < adj.get(src).size(); j++){
            int ele = adj.get(src).get(j);
            if(!visited[ele])
            dfs(ele , adj , visited , ans);
        }
    }
}