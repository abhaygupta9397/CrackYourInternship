/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution { // just reverse the odd values
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> ans = new ArrayList<>();
        if (root == null) return ans;

        Queue<TreeNode> q = new LinkedList<>();
        q.add(root);
        int lp = 0;
        while(!q.isEmpty()){
            int l = q.size();
            List<Integer> level = new LinkedList<>();
            for(int i = 1 ; i <= l; i++){
                TreeNode curr = q.poll();
                if(lp % 2 == 1) // reverse it
                level.add(0,curr.val);
                else
                level.add(curr.val);

                if(curr.left != null)
                q.offer(curr.left);
                if(curr.right != null)
                q.offer(curr.right);

                 
            }
            lp++;
            ans.add(level);
        }
        return ans;

    }
}